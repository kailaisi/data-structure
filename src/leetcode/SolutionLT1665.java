package leetcode;


/**
 * 1665. 完成所有任务的最少初始能量
 * 给你一个任务数组 tasks ，其中 tasks[i] = [actuali, minimumi] ：
 *
 * actuali 是完成第 i 个任务 需要耗费 的实际能量。
 * minimumi 是开始第 i 个任务前需要达到的最低能量。
 * 比方说，如果任务为 [10, 12] 且你当前的能量为 11 ，那么你不能开始这个任务。如果你当前的能量为 13 ，你可以完成这个任务，且完成它后剩余能量为 3 。
 * 你可以按照 任意顺序 完成任务。
 * 请你返回完成所有任务的 最少 初始能量。
 *
 * 示例 1：
 *
 * 输入：tasks = [[1,2],[2,4],[4,8]]
 * 输出：8
 * 解释：
 * 一开始有 8 能量，我们按照如下顺序完成任务：
 *     - 完成第 3 个任务，剩余能量为 8 - 4 = 4 。
 *     - 完成第 2 个任务，剩余能量为 4 - 2 = 2 。
 *     - 完成第 1 个任务，剩余能量为 2 - 1 = 1 。
 * 注意到尽管我们有能量剩余，但是如果一开始只有 7 能量是不能完成所有任务的，因为我们无法开始第 3 个任务。
 * 示例 2：
 *
 * 输入：tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]
 * 输出：32
 * 解释：
 * 一开始有 32 能量，我们按照如下顺序完成任务：
 *     - 完成第 1 个任务，剩余能量为 32 - 1 = 31 。
 *     - 完成第 2 个任务，剩余能量为 31 - 2 = 29 。
 *     - 完成第 3 个任务，剩余能量为 29 - 10 = 19 。
 *     - 完成第 4 个任务，剩余能量为 19 - 10 = 9 。
 *     - 完成第 5 个任务，剩余能量为 9 - 8 = 1 。
 * 示例 3：
 *
 * 输入：tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]
 * 输出：27
 * 解释：
 * 一开始有 27 能量，我们按照如下顺序完成任务：
 *     - 完成第 5 个任务，剩余能量为 27 - 5 = 22 。
 *     - 完成第 2 个任务，剩余能量为 22 - 2 = 20 。
 *     - 完成第 3 个任务，剩余能量为 20 - 3 = 17 。
 *     - 完成第 1 个任务，剩余能量为 17 - 1 = 16 。
 *     - 完成第 4 个任务，剩余能量为 16 - 4 = 12 。
 *     - 完成第 6 个任务，剩余能量为 12 - 6 = 6 。
 *
 * 提示：
 *
 * 1 <= tasks.length <= 105
 * 1 <= actual​i <= minimumi <= 104
 * 解题思路：假设我们的初识能量为E，那么当我们处理完最后一个的时候，需要满足的条件是
 *   E-（a0+a1+a2+a3）>(ai-mi)
 * 以【1，0，2】为例。  第一遍结果是：1，1，2。  第二遍的时候，a[0]>a[1]，所以要0位置的比1位置的数据+1。而且从正面结果是1，这时候要取最大值
 * 时间复杂度：O（N）： 最多遍历2N
 * 空间复杂度：O（1）
 */
class SolutionLT1665 {
    public static void main(String[] args) {
        SolutionLT1665 lt = new SolutionLT1665();
        System.out.println(lt.candy(new int[]{1,0,2}));//5
        System.out.println(lt.candy(new int[]{1,2,2}));//4
    }

    public int candy(int[] ratings) {
        int length = ratings.length;
        if (length < 2) {
            return length;
        }
        int[] res = new int[length];
        res[0] = 1;
        //先遍历确定左边的效果
        for (int i = 1; i < length; i++) {
            if (ratings[i] > ratings[i - 1]) {
                res[i] = res[i - 1] + 1;
            } else {
                res[i] = 1;
            }
        }
        //反面遍历
        for (int i = length - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i + 1]) {
                int r = res[i + 1] + 1;
                res[i] = Math.max(res[i], r);
            }
        }
        //最终结果
        int result = 0;
        for (int i = 0; i < length; i++) {
            result += res[i];
        }
        return result;
    }
}
